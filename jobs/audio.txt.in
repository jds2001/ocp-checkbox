plugin: shell 
name: audio/list_devices
requires:
 device.category == 'AUDIO'
 package.name == 'alsa-base'
command: cat /proc/asound/cards
_description: Test to detect audio devices

plugin: manual
name: audio/playback_auto
depends: audio/list_devices
requires:
 device.category == 'AUDIO'
 package.name == 'alsa-base'
 package.name == 'gir1.2-gst-plugins-base-0.10' or package.name == 'gir1.2-gst-plugins-base-1.0'
 package.name == 'pulseaudio-utils'
command: audio_settings store --file=$CHECKBOX_DATA/pulseaudio_settings; audio_settings set --device=pci --volume=50; gst_pipeline_test -t 2 'audiotestsrc wave=sine freq=512 ! audioconvert ! audioresample ! autoaudiosink'; EXIT_CODE=$?; audio_settings restore --file=$CHECKBOX_DATA/pulseaudio_settings; exit $EXIT_CODE
_description:
 PURPOSE:
     This test will check that internal speakers work correctly
 STEPS:
     1. Make sure that no external speakers or headphones are connected
        If testing a desktop, external speakers are allowed
     2. Click the Test button to play a brief tone on your audio device
 VERIFICATION:
     Did you hear a tone?

plugin: manual
name: audio/playback_hdmi
requires:
 device.category == 'AUDIO'
 package.name == 'alsa-base'
 package.name == 'gir1.2-gst-plugins-base-0.10' or package.name == 'gir1.2-gst-plugins-base-1.0'
 package.name == 'pulseaudio-utils'
command:
 audio_settings store --verbose --file=$CHECKBOX_DATA/pulseaudio_settings; audio_settings set --verbose --device=hdmi --volume=50; gst_pipeline_test -t 2 --device hdmi 'audiotestsrc wave=sine freq=512 ! audioconvert ! audioresample ! autoaudiosink'; EXIT_CODE=$?; audio_settings restore --verbose --file=$CHECKBOX_DATA/pulseaudio_settings; exit $EXIT_CODE
_description:
 PURPOSE:
     HDMI audio interface verification
 STEPS:
     1. Plug an external HDMI device with sound (Use only one HDMI/DisplayPort interface at a time for this test)
     2. Click the Test button
 VERIFICATION:
     Did you hear the sound from the HDMI device?

plugin: manual
name: audio/playback_displayport
requires:
 device.category == 'AUDIO'
 package.name == 'alsa-base'
 package.name == 'gir1.2-gst-plugins-base-0.10' or package.name == 'gir1.2-gst-plugins-base-1.0'
 package.name == 'pulseaudio-utils'
command:
 audio_settings store --verbose --file=$CHECKBOX_DATA/pulseaudio_settings; audio_settings set --verbose --device=hdmi --volume=50; gst_pipeline_test -t 2 --device hdmi 'audiotestsrc wave=sine freq=512 ! audioconvert ! audioresample ! autoaudiosink'; EXIT_CODE=$?; audio_settings restore --verbose --file=$CHECKBOX_DATA/pulseaudio_settings; exit $EXIT_CODE
_description:
 PURPOSE:
     DisplayPort audio interface verification
 STEPS:
     1. Plug an external DisplayPort device with sound (Use only one HDMI/DisplayPort interface at a time for this test)
     2. Click the Test button
 VERIFICATION:
     Did you hear the sound from the DisplayPort device?

plugin: manual
name: audio/playback_headphones
depends: audio/list_devices
requires:
 device.category == 'AUDIO'
 package.name == 'alsa-base'
 package.name == 'gir1.2-gst-plugins-base-0.10' or package.name == 'gir1.2-gst-plugins-base-1.0'
 package.name == 'pulseaudio-utils'
command: audio_settings store --file=$CHECKBOX_DATA/pulseaudio_settings; audio_settings set --device=pci --volume=50; gst_pipeline_test -t 2 'audiotestsrc wave=sine freq=512 ! audioconvert ! audioresample ! autoaudiosink'; EXIT_CODE=$?; audio_settings restore --file=$CHECKBOX_DATA/pulseaudio_settings; exit $EXIT_CODE
_description:
 PURPOSE:
     This test will check that headphones connector works correctly
 STEPS:
     1. Connect a pair of headphones to your audio device
     2. Click the Test button to play a sound to your audio device
 VERIFICATION:
     Did you hear a sound through the headphones and did the sound play without any distortion, clicks or other strange noises from your headphones?

plugin: manual
name: audio/alsa_record_playback_internal
depends: audio/playback_auto
requires:
 device.category == 'AUDIO'
 package.name == 'alsa-base'
 package.name == 'pulseaudio-utils'
 package.name == 'gstreamer1.0-plugins-good' or package.name == 'gstreamer0.10-plugins-good'
command: audio_settings store --file=$CHECKBOX_DATA/pulseaudio_settings; audio_settings set --device=pci --volume=50; alsa_record_playback; EXIT_CODE=$?; audio_settings restore --file=$CHECKBOX_DATA/pulseaudio_settings; exit $EXIT_CODE
_description:
 PURPOSE:
     This test will check that recording sound using the onboard microphone works correctly
 STEPS:
     1. Disconnect any external microphones that you have plugged in
     2. Click "Test", then speak into your internal microphone
     3. After a few seconds, your speech will be played back to you.
 VERIFICATION:
     Did you hear your speech played back?

plugin: manual
name: audio/alsa_record_playback_external
depends: audio/playback_headphones
requires:
 device.category == 'AUDIO'
 package.name == 'alsa-base'
 package.name == 'pulseaudio-utils'
 package.name == 'gstreamer1.0-plugins-good' or package.name == 'gstreamer0.10-plugins-good'
command: audio_settings store --file=$CHECKBOX_DATA/pulseaudio_settings; audio_settings set --device=pci --volume=50; alsa_record_playback; EXIT_CODE=$?; audio_settings restore --file=$CHECKBOX_DATA/pulseaudio_settings; exit $EXIT_CODE
_description:
 PURPOSE:
     This test will check that recording sound using an external microphone works correctly
 STEPS:
     1. Connect a microphone to your microphone port
     2. Click "Test", then speak into the external microphone
     3. After a few seconds, your speech will be played back to you
 VERIFICATION:
     Did you hear your speech played back?

plugin: manual
name: audio/alsa_record_playback_usb
requires:
 device.category == 'AUDIO'
 package.name == 'alsa-base'
 package.name == 'pulseaudio-utils'
 package.name == 'gstreamer1.0-plugins-good' or package.name == 'gstreamer0.10-plugins-good'
command: audio_settings store --file=$CHECKBOX_DATA/pulseaudio_settings; audio_settings set --device=usb --volume=50; alsa_record_playback; EXIT_CODE=$?; audio_settings restore --file=$CHECKBOX_DATA/pulseaudio_settings; exit $EXIT_CODE
_description:
 PURPOSE:
     This test will check that a USB audio device works correctly
 STEPS:
     1. Connect a USB audio device to your system
     2. Click "Test", then speak into the microphone
     3. After a few seconds, your speech will be played back to you
 VERIFICATION:
     Did you hear your speech played back through the USB headphones?

plugin: shell
name: audio/alsa_record_playback_automated
requires:
 package.name == 'python3-gi'
 package.name == 'gir1.2-gstreamer-1.0'
 package.name == 'libgstreamer1.0-0'
 package.name == 'gstreamer1.0-plugins-good'
 package.name == 'gstreamer1.0-pulseaudio'
 package.name == 'alsa-base'
 device.category == 'AUDIO'
command: audio_test
_description:
 Play back a sound on the default output and listen for it on the 
 default input.

plugin: shell
name: audio/alsa_info_collect
command: alsa_info --no-dialog --no-upload --output ${CHECKBOX_DATA}/alsa_info.log
_description:
 Collect audio-related system information. This data can be used to
 simulate this computer's audio subsystem and perform more detailed tests
 under a controlled environment.

plugin: attachment
name: audio/alsa_info_attachment
depends: audio/alsa_info_collect
command: [ -e ${CHECKBOX_DATA}/alsa_info.log ] && cat ${CHECKBOX_DATA}/alsa_info.log
_description:
 Attaches the audio hardware data collection log to the results.

plugin: manual
name: audio/channels
command: speaker-test -c 2 -l 1 -t wav
_description:
 PURPOSE:
     Check that the various audio channels are working properly
 STEPS:
     1. Click the Test button
 VERIFICATION:
     You should clearly hear a voice from the different audio channels

plugin: shell
name: audio/check_volume
requires:
 package.name == 'pulseaudio-utils'
 device.category == 'AUDIO'
command: volume_test --minvol 1 --maxvol 100
_description:
 This test will verify that the volume levels are at an acceptable level on
 your local system.  The test will validate that the volume is greater than
 or equal to minvol and less than or equal to maxvol for all sources (inputs)
 and sinks (outputs) recognized by PulseAudio.  It will also validate that the
 active source and sink are not muted.  You should not manually adjust the 
 volume or mute before running this test.

plugin: manual
name: audio/external-lineout
_description:
 PURPOSE:
      Check that external line out connection works correctly
 STEPS:
      1. Insert cable to speakers (with built-in amplifiers) on the line out port
      2. Open system sound preferences, 'Output' tab, select 'Line-out' on the connector list. Click the Test button
      3. On the system sound preferences, select 'Internal Audio' on the device list and click 'Test Speakers' to check left and right channel
 VERIFICATION:
      1. Do you hear a sound in the speakers? The internal speakers should *not* be muted automatically
      2. Do you hear the sound coming out on the corresponding channel?

plugin: manual
name: audio/external-linein
requires:
 device.category == 'AUDIO'
 package.name == 'alsa-base'
 package.name == 'pulseaudio-utils'
 package.name == 'gstreamer1.0-plugins-good' or package.name == 'gstreamer0.10-plugins-good'
command: audio_settings store --file=$CHECKBOX_DATA/pulseaudio_settings; audio_settings set --device=pci --volume=50; alsa_record_playback; EXIT_CODE=$?; audio_settings restore --file=$CHECKBOX_DATA/pulseaudio_settings; exit $EXIT_CODE
_description:
 PURPOSE:
     Check that external line in connection works correctly
 STEPS:
     1. Use a cable to connect the line in port to an external line out source.
     2. Open system sound preferences, 'Input' tab, select 'Line-in' on the connector list. Click the Test button
     3. After a few seconds, your recording will be played back to you.
 VERIFICATION:
     Did you hear your recording?
